# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
paddle_vel = 5

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    if direction == RIGHT:
        ball_vel = [random.randrange(2,4),-random.randrange(1,3)]
    elif direction == LEFT: 
        ball_vel = [-random.randrange(2,4),-random.randrange(1,3)]
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    

# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    paddle1_pos = (HEIGHT / 2) - (PAD_HEIGHT/2)
    paddle2_pos = (HEIGHT / 2) - (PAD_HEIGHT/2)
    paddle1_vel = 0
    paddle2_vel = 0
    global score1, score2  # these are ints
    score1 = 0
    score2 = 0
    global RIGHT
    spawn_ball(RIGHT)



def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel
 
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    #collide and reflect off top and bottom
    if ball_pos[1] <= BALL_RADIUS:
        ball_vel[1]  = - ball_vel[1]
    if ball_pos[1] >= HEIGHT - BALL_RADIUS:
        ball_vel[1] = - ball_vel[1]
        
    #collide and respawn with gutter
    if ball_pos[0] <= BALL_RADIUS + PAD_WIDTH and not paddle1_pos + PAD_HEIGHT >= ball_pos[1] >= paddle1_pos:
        spawn_ball(RIGHT)
        score2 += 1
    elif ball_pos[0] <= BALL_RADIUS + PAD_WIDTH and PAD_HEIGHT + paddle1_pos>= ball_pos[1] >= paddle1_pos:
        ball_vel[0] = -ball_vel[0]*1.1
    if ball_pos[0] >= WIDTH -BALL_RADIUS - PAD_WIDTH and not PAD_HEIGHT + paddle2_pos>= ball_pos[1] >= paddle2_pos:
        spawn_ball(LEFT)
        score1 += 1
    elif ball_pos[0] >= WIDTH -BALL_RADIUS - PAD_WIDTH and PAD_HEIGHT + paddle2_pos>= ball_pos[1] >= paddle2_pos:
        ball_vel[0] = -ball_vel[0]*1.1
    
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 2, "White", "White")
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos + paddle1_vel >= 0 and paddle1_pos + paddle1_vel<= (HEIGHT - PAD_HEIGHT):
        paddle1_pos += paddle1_vel
    if paddle2_pos + paddle2_vel >= 0 and paddle2_pos + paddle2_vel<= (HEIGHT - PAD_HEIGHT):
        paddle2_pos += paddle2_vel
    
    # draw paddles
    canvas.draw_polygon([[0, paddle1_pos],[PAD_WIDTH, paddle1_pos],[PAD_WIDTH, paddle1_pos+PAD_HEIGHT],[0,paddle1_pos+PAD_HEIGHT]],5, 'White', 'White')                  
    canvas.draw_polygon([[WIDTH, paddle2_pos],[WIDTH-PAD_WIDTH, paddle2_pos],[WIDTH-PAD_WIDTH, paddle2_pos+PAD_HEIGHT],[WIDTH,paddle2_pos+PAD_HEIGHT]],5, 'White', 'White')                  
  
    # draw scores
    canvas.draw_text(str(score1),[(WIDTH/2-60),60], 35, "White")
    canvas.draw_text(str(score2),[(WIDTH/2+60),60], 35, "White")
        
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP["up"]:
        paddle2_vel -= paddle_vel
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel += paddle_vel 
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel -= paddle_vel
    if key==simplegui.KEY_MAP["s"]:
        paddle1_vel += paddle_vel 

        
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key==simplegui.KEY_MAP["up"]:
        paddle2_vel = 0
    if key==simplegui.KEY_MAP["down"]:
        paddle2_vel = 0 
    if key==simplegui.KEY_MAP["w"]:
        paddle1_vel = 0
    if key==simplegui.KEY_MAP["s"]:
        paddle1_vel = 0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
button1 = frame.add_button('Restart', new_game)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
